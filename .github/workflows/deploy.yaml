name: deploy to production

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master", "ft/**", "feat/**", "feature/**" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MYSQL_DB: testdb
      MYSQL_PASSWORD: root
      MYSQL_ROOT_PASSWORD: root
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DB }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
      postgres:
        image: postgres:12-alpine
        # Provide the password for postgres
        env:
          POSTGRES_DB: simple_bank
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2 # More information on this action can be found below in the 'AWS Credentials' section
      #   with:
      #     role-to-assume: arn:aws:iam::793172687192:user/github-ci
      #     aws-region: us-east-1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: get secret from secretsmanager and set app.env file
        run: aws secretsmanager get-secret-value --secret-id simple_bank --region us-east-1 --query SecretString --output text|jq 'to_entries|map("\(.key)=\(.value)")|.[]' -r > app.env
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simplebank
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG